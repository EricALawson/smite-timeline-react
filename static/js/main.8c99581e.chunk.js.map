{"version":3,"sources":["data_objects/StatBlock.ts","data_objects/KillTiming.ts","redux/selectors/StatsSelector.ts","data_objects/God.ts","data_objects/Item.ts","data_objects/TestObjects.ts","redux/GodProvider.ts","redux/store.ts","data_objects/Build.ts","redux/reducers/GodReducer.ts","redux/reducers/itemReducer.ts","redux/reducers/KillTimingReducer.ts","redux/reducers/TimelineReducer.ts","redux/reducers/ItemPickerSlice.ts","components/GodStats/GodSelector.tsx","components/GodStats/GodStats.tsx","components/TimelineSlider/TimelineSlider.tsx","components/ItemBuild/ItemSlot/ItemSlot.tsx","components/ItemBuild/ItemBuild.tsx","components/ItemBuild/ItemPicker/ItemPicker.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["StatBlock","statMap","power","critChance","flatPenetration","percentPenetration","health","mana","hp5","mp5","moveSpeed","attackSpeed","physicalProtections","magicalProtections","lifesteal","cooldownReduction","crowdControlReduction","xpForLevel","minions","waveMelee","xp","gold","waveArcher","jungleBuffMinion","jungleBuffHolder","jungleHarpy","jungleElderHarpy","jungleAlphaHarpy","KillTiming","startingGold","waveStartTime","waveRespawnTime","jungleStartTime","jungleRespawnTime","goldPerSecond","selectItem","state","items","selectGod","god","selectKillTiming","killTiming","makeGodEventSelector","createSelector","levelTimes","time","level","times","length","push","getLevelTimes","levelEvents","map","stats","perLevelStats","baseStats","makeItemEventSelector","itemCosts","prevCost","forEach","item","goldCost","itemTimes","goldTarget","getTimeForGold","itemEvents","i","makeStatsSelector","godEvents","sort","a","b","statEvents","stats1","stats2","summed","sum","event","Object","assign","God","name","image","process","Item","passive","EmptySlot","Ares","Cerberus","shoesOfFocus","shoesOfTheMagi","GodProvider","gods","Map","this","set","instance","get","Array","from","keys","buildIdentifier","Build","godReducer","action","payload","setItemAt","index","removeItemAt","killTimingReducer","timeReducer","createReducer","setTime","timeRangeReducer","setRange","itemPicker","createSlice","initialState","isOpen","slot","buildID","reducers","closeItemPicker","openItemPicker","actions","buildSlice","leftBuild","left","rightBuild","right","buildSlices","store","configureStore","reducer","timeRange","GodSelector","getInstance","aria-label","onChange","selectedGod","getGod","target","value","console","log","type","dispatch","godNames","key","GodStats","Connected","connect","className","src","alt","StatTable","statsSelector","displayStat","ConnectedStatItem","build","events","val","filter","StatItem","props","changeTime","createAction","getState","defaultValue","min","max","vertical","reverse","ItemSlot","onClick","role","ownProps","slots","count","isSelectorOpen","closeSelector","open","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c99581e.chunk.js","sourcesContent":["\r\nexport interface StatBlock {\r\n    power: number;\r\n    critChance: number;\r\n    flatPenetration: number;\r\n    percentPenetration: number;\r\n    health: number;\r\n    mana: number;\r\n    hp5: number;\r\n    mp5: number;\r\n    moveSpeed: number;\r\n    attackSpeed: number;\r\n    physicalProtections: number;\r\n    magicalProtections: number;\r\n    lifesteal: number;\r\n    cooldownReduction: number;\r\n    crowdControlReduction: number;\r\n}\r\n\r\nexport function StatBlock(statMap: any): StatBlock {\r\n    return {\r\n        power: statMap.power ? statMap.power : 0,\r\n        critChance: statMap.critChance ? statMap.critChance : 0,\r\n        flatPenetration: statMap.flatPenetration ? statMap.flatPenetration : 0,\r\n        percentPenetration: statMap.percentPenetration ? statMap.percentPenetration : 0,\r\n        health: statMap.health ? statMap.health : 0,\r\n        mana: statMap.mana ? statMap.mana : 0,\r\n        hp5: statMap.hp5 ? statMap.hp5 : 0,\r\n        mp5: statMap.mp5 ? statMap.mp5 : 0,\r\n        moveSpeed: statMap.moveSpeed ? statMap.moveSpeed : 0,\r\n        attackSpeed: statMap.attackSpeed ? statMap.attackSpeed : 0,\r\n        physicalProtections: statMap.physicalProtections ? statMap.physicalProtections : 0,\r\n        magicalProtections: statMap.magicalProtections ? statMap.magicalProtections : 0,\r\n        lifesteal: statMap.lifesteal ? statMap.lifesteal : 0,\r\n        cooldownReduction: statMap.cooldownReduction ? statMap.cooldownReduction : 0,\r\n        crowdControlReduction: statMap.crowdControlReduction ? statMap.crowdControlReduction : 0\r\n    }\r\n}\r\n\r\nexport function add(stats1: StatBlock, stats2: StatBlock): StatBlock {\r\n    return {\r\n        power: stats1.power + stats2.power,\r\n        critChance: stats1.critChance + stats2.critChance,\r\n        flatPenetration: stats1.flatPenetration + stats2.flatPenetration,\r\n        percentPenetration: stats1.percentPenetration + stats2.percentPenetration,\r\n        health: stats1.health + stats2.health,\r\n        mana: stats1.mana + stats2.mana,\r\n        hp5: stats1.hp5 + stats2.hp5,\r\n        mp5: stats1.mp5 + stats2.mp5,\r\n        moveSpeed: stats1.moveSpeed + stats2.moveSpeed,\r\n        attackSpeed: stats1.attackSpeed + stats2.attackSpeed,\r\n        physicalProtections: stats1.physicalProtections + stats2.physicalProtections,\r\n        magicalProtections: stats1.magicalProtections + stats2.magicalProtections,\r\n        lifesteal: stats1.lifesteal + stats2.lifesteal,\r\n        cooldownReduction: stats1.cooldownReduction + stats2.cooldownReduction,\r\n        crowdControlReduction: stats1.crowdControlReduction + stats2.crowdControlReduction\r\n    }\r\n}\r\n\r\n\r\nexport default StatBlock;","\r\n\r\nexport interface KillTiming {\r\n    startingGold: number;\r\n    waveStartTime: number;\r\n    waveRespawnTime: number;\r\n    jungleStartTime: number;\r\n    jungleRespawnTime: number;\r\n    goldPerSecond: number;\r\n}\r\n\r\nexport function KillTiming(): KillTiming {\r\n    return {\r\n        startingGold: 1500,\r\n        waveStartTime: 30,\r\n        waveRespawnTime: 30,\r\n        jungleStartTime: 30,\r\n        jungleRespawnTime: 120,\r\n        goldPerSecond: 3\r\n    }\r\n}\r\n    \r\nexport function getLevelTimes(killTiming: KillTiming): number[] {\r\n    let time = 0;\r\n    let xp = 0;\r\n    let level = 0; //don't bother adjusting for array indexing until we display the level.\r\n    var times = [];\r\n    while(times.length < 20) {\r\n        if(xp >= xpForLevel[level]) {\r\n            times.push(time);\r\n            level++;\r\n        }\r\n\r\n        time++;\r\n\r\n        if((time - killTiming.waveStartTime) % killTiming.waveRespawnTime === 0) {\r\n            xp += minions.waveMelee.xp * 3 + minions.waveArcher.xp * 3;\r\n        }\r\n\r\n        if((time - killTiming.jungleStartTime) % killTiming.jungleRespawnTime === 0) {\r\n            xp += minions.jungleBuffMinion.xp * 2 + minions.jungleBuffHolder.xp;\r\n        }\r\n    }\r\n    return times;\r\n}\r\n\r\nexport function getTimeForGold(killTiming: KillTiming, goldTarget: number): number {\r\n    let gold = killTiming.startingGold;\r\n    let time = 0;\r\n    while (gold < goldTarget) {\r\n        time++;\r\n\r\n        gold += killTiming.goldPerSecond;\r\n\r\n        if((time - killTiming.waveStartTime) % killTiming.waveRespawnTime === 0) {\r\n            gold += minions.waveMelee.gold * 3 + minions.waveArcher.gold * 3;\r\n        }\r\n\r\n        if((time - killTiming.jungleStartTime) % killTiming.jungleRespawnTime === 0) {\r\n            gold += minions.jungleBuffMinion.gold * 2 + minions.jungleBuffHolder.gold;\r\n        }\r\n        //console.log(\"time: \" + time + \" gold: \" + gold);\r\n    }\r\n    return time;\r\n}\r\n\r\nexport function getTimeForKills(killTiming: KillTiming, killTarget: number) {\r\n    let time = 0;\r\n    let kills = 0;\r\n    while (kills < killTarget) {\r\n        if((time - killTiming.waveStartTime) % killTiming.waveRespawnTime === 0) {\r\n            kills += 6;\r\n        }\r\n\r\n        if((time - killTiming.jungleStartTime) % killTiming.jungleRespawnTime === 0) {\r\n            kills += 3;\r\n        }\r\n    }\r\n\r\n    return time;\r\n}\r\n\r\n\r\nconst xpForLevel = [\r\n    0,\r\n    308,\r\n    671,\r\n    1089,\r\n    1562,\r\n    2090,\r\n    2673,\r\n    3311,\r\n    4004,\r\n    4752,\r\n    5555,\r\n    6413,\r\n    7326,\r\n    8294,\r\n    9317,\r\n    10395,\r\n    11528,\r\n    12716,\r\n    13959,\r\n    15257\r\n]\r\n\r\nconst minions = {\r\n\r\n    waveMelee: {\r\n        xp: 45,\r\n        gold: 25\r\n    },\r\n    waveArcher : {\r\n        xp: 25,\r\n        gold: 18\r\n    },\r\n    jungleBuffMinion : {\r\n        xp: 16,\r\n        gold: 20\r\n    },\r\n    jungleBuffHolder : {\r\n        xp: 116,\r\n        gold: 48\r\n    },\r\n    jungleHarpy : {\r\n        xp: 22,\r\n        gold: 22\r\n    },\r\n    jungleElderHarpy: {\r\n        xp: 30,\r\n        gold: 34\r\n    },\r\n    jungleAlphaHarpy: {\r\n        xp: 35,\r\n        gold: 50\r\n    }\r\n}\r\n\r\nexport default KillTiming;","import { createSelector } from \"@reduxjs/toolkit\";\r\nimport StatBlock, { add } from \"../../data_objects/StatBlock\";\r\nimport Item from \"../../data_objects/Item\";\r\nimport God from \"../../data_objects/God\";\r\nimport KillTiming, { getTimeForGold, getLevelTimes } from \"../../data_objects/KillTiming\";\r\nimport Build from \"../../data_objects/Build\";\r\n\r\ntype BuildEvent = {\r\n    time: number,\r\n    stats: StatBlock\r\n}\r\n\r\nconst selectItem = (state: Build) => state.items;\r\nconst selectGod = (state: Build) => state.god;\r\nconst selectKillTiming = (state: Build) => state.killTiming;\r\n\r\nconst makeGodEventSelector = () => {\r\n    return createSelector( \r\n        [selectGod, selectKillTiming],\r\n        (god: God, killTiming: KillTiming) => {\r\n            let levelTimes: number[] = getLevelTimes(killTiming);\r\n            let levelEvents: BuildEvent[] = []\r\n            levelEvents.push( ...levelTimes.map(time => ({\r\n                time: time,\r\n                stats: god.perLevelStats\r\n            })));\r\n\r\n            levelEvents[0].stats = god.baseStats;\r\n\r\n            return levelEvents;\r\n        }\r\n    );\r\n}\r\n\r\nexport {makeGodEventSelector};\r\n\r\nconst makeItemEventSelector = () => {\r\n    return createSelector( \r\n        [selectItem, selectKillTiming],\r\n        (items: Item[], killTiming: KillTiming) => {\r\n            let itemCosts: number[] = []; //this is the cumulative total spent when this item is built.\r\n            let prevCost = 0;\r\n            items.forEach((item: Item ) => {\r\n                itemCosts.push(item.goldCost + prevCost);\r\n                prevCost += item.goldCost;\r\n            });\r\n            let itemTimes: number[] = itemCosts.map(gold => getTimeForGold(killTiming, gold));\r\n            let itemEvents: BuildEvent[] = [];\r\n            for (let i = 0; i < itemTimes.length; i++) {\r\n                itemEvents.push({\r\n                    time: itemTimes[i],\r\n                    stats: items[i].stats\r\n                });\r\n        }\r\n        return itemEvents;\r\n    });\r\n}\r\nexport {makeItemEventSelector};\r\n\r\nconst makeEventSelector = () => {\r\n    return createSelector(\r\n        [makeGodEventSelector(), makeItemEventSelector()],\r\n        (godEvents, itemEvents, ) => {\r\n            var events: BuildEvent[] = [...godEvents, ...itemEvents];\r\n            \r\n            return events.sort((a:BuildEvent, b: BuildEvent) => (a.time > b.time) ? 1: -1);\r\n        }\r\n    );\r\n}\r\n\r\nconst makeStatsSelector = () => {\r\n    return createSelector(\r\n        [makeEventSelector()],\r\n        (statEvents) => {\r\n            let summed: BuildEvent[] = [];\r\n            let sum = StatBlock({});\r\n            for (let event of statEvents) {\r\n                sum = add(sum, event.stats);\r\n                summed.push({\r\n                    time: event.time,\r\n                    stats: Object.assign({}, sum)\r\n                })\r\n            }\r\n            return summed;\r\n        }\r\n    )\r\n}\r\n\r\nexport default makeStatsSelector;\r\n\r\n","import StatBlock from \"./StatBlock\";\r\n\r\ninterface God {\r\n    name: string;\r\n    baseStats: StatBlock;\r\n    perLevelStats: StatBlock;\r\n    image: string;\r\n}\r\n\r\nconst God = (\r\n    name: string = \"No god selected\",\r\n    baseStats: StatBlock = StatBlock({}),\r\n    perLevelStats: StatBlock = StatBlock({})\r\n): God => {\r\n    return {\r\n        name: name,\r\n        baseStats: baseStats,\r\n        perLevelStats: perLevelStats,\r\n        image: process.env.PUBLIC_URL + '/images/god_cards/' + name + '.jpg'\r\n    }\r\n}\r\n\r\nexport default God;","import StatBlock from \"./StatBlock\";\r\n\r\ninterface Item {\r\n    goldCost: number;\r\n    name: string;\r\n    stats: StatBlock;\r\n    image: string;\r\n    passive: any; //TODO make item passives\r\n}\r\n\r\nconst Item = (\r\n    name = \"\", \r\n    goldCost = 0, \r\n    stats = StatBlock({}), \r\n    passive = null\r\n    ): Item => {\r\n        return {\r\n            name: name,\r\n            goldCost: goldCost,\r\n            stats: stats,\r\n            passive: passive,\r\n            image: process.env.PUBLIC_URL + '/images/items/' + name + '.jpg'\r\n        } as Item\r\n    }\r\n\r\nexport default Item;\r\n\r\nconst EmptySlot = Item('Empty Slot');\r\n\r\nexport {EmptySlot};","import God from \"./God\";\r\nimport StatBlock from \"./StatBlock\";\r\nimport Item from \"./Item\";\r\n\r\nconst Ares = God(\r\n    'Ares',\r\n    StatBlock({ //base stats\r\n        health: 485,\r\n        mana: 200,\r\n        hp5: 8,\r\n        mp5: 4.6,\r\n        physicalProtections: 20,\r\n        magicalProtections: 30\r\n    }),\r\n    StatBlock({ //per level stats\r\n        health: 90,\r\n        mana: 37,\r\n        hp5: 0.67,\r\n        mp5: 0.42,\r\n        physicalProtections: 3,\r\n        magicalProtections: 0.9\r\n    })\r\n);\r\n\r\nexport {Ares};\r\n\r\nconst Cerberus = God(\r\n    'Cerberus',\r\n    StatBlock({ //base stats\r\n        health: 490,\r\n        mana: 200,\r\n        hp5: 7,\r\n        mp5: 4.6,\r\n        physicalProtections: 19,\r\n        magicalProtections: 30\r\n    }),\r\n    StatBlock({ //per level stats\r\n        health: 95,\r\n        mana: 35,\r\n        hp5: 0.75,\r\n        mp5: 0.4,\r\n        physicalProtections: 3,\r\n        magicalProtections: 0.9\r\n    })\r\n);\r\n\r\nexport {Cerberus};\r\n\r\nlet shoesOfFocus = Item();\r\nshoesOfFocus.goldCost = 1600;\r\nshoesOfFocus.name = \"Shoes of Focus\";\r\nshoesOfFocus.stats = StatBlock({\r\n    mana: 250,\r\n    power: 55,\r\n    cooldownReduction: 0.10,\r\n    moveSpeed: 0.18\r\n});\r\nshoesOfFocus.image = process.env.PUBLIC_URL + '/images/items/' + shoesOfFocus.name + '.jpg';\r\n\r\nexport {shoesOfFocus};\r\n\r\nlet shoesOfTheMagi = Item();\r\nshoesOfTheMagi.goldCost = 1550;\r\nshoesOfTheMagi.name = \"Shoes of The Magi\";\r\nshoesOfTheMagi.stats = StatBlock({\r\n    power: 75,\r\n    mana: 100,\r\n    lifesteal: 0.08,\r\n    moveSpeed: 0.18\r\n});\r\nshoesOfTheMagi.image = process.env.PUBLIC_URL + '/images/items/' + shoesOfTheMagi.name + '.jpg';\r\n\r\nexport {shoesOfTheMagi};","import God from \"../data_objects/God\";\r\nimport { Ares, Cerberus } from \"../data_objects/TestObjects\";\r\n\r\nclass GodProvider {\r\n    //Singleton boilerplate\r\n    private static instance: GodProvider;\r\n\r\n    static getInstance(): GodProvider {\r\n        if (!GodProvider.instance) {\r\n            GodProvider.instance = new GodProvider();\r\n        }\r\n        return GodProvider.instance;\r\n    }\r\n\r\n    //class code\r\n    private gods = new Map<string, God>();\r\n\r\n    private constructor() {\r\n        this.gods.set('Ares', Ares);\r\n        this.gods.set('Cerberus', Cerberus)\r\n    }\r\n\r\n    get godNames(): string[] {\r\n        return Array.from(this.gods.keys());\r\n    }\r\n\r\n    getGod(name: string): God|undefined {\r\n        return this.gods.get(name);\r\n    }\r\n}\r\n\r\nexport default GodProvider;","\r\nimport {configureStore, createSlice} from '@reduxjs/toolkit';\r\nimport godReducer from './reducers/GodReducer';\r\nimport {setItemAt, removeItemAt} from './reducers/itemReducer';\r\nimport killTimingReducer from './reducers/KillTimingReducer';\r\nimport Build from '../data_objects/Build';\r\nimport {timeReducer, timeRangeReducer} from './reducers/TimelineReducer';\r\nimport { Ares } from '../data_objects/TestObjects';\r\nimport itemPicker from './reducers/ItemPickerSlice';\r\n\r\nenum buildIdentifier {\r\n    left = 'left',\r\n    right = 'right'\r\n}\r\n\r\nexport {buildIdentifier};\r\n\r\nconst buildSlice = (name: buildIdentifier) => {\r\n    return createSlice({\r\n        name: name,\r\n        initialState: Build(Ares),\r\n        reducers: {\r\n            godReducer,\r\n            setItemAt,\r\n            removeItemAt,\r\n            killTimingReducer\r\n        }\r\n    })\r\n}\r\n\r\nconst leftBuild = buildSlice(buildIdentifier.left);\r\nconst rightBuild = buildSlice(buildIdentifier.right);\r\n\r\nconst buildSlices = {\r\n    left: leftBuild,\r\n    right: rightBuild\r\n}\r\n\r\nexport {buildSlices};\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        left: leftBuild.reducer,\r\n        right: rightBuild.reducer,\r\n        time: timeReducer,\r\n        timeRange: timeRangeReducer,\r\n        itemPicker: itemPicker.reducer\r\n    }\r\n});\r\n\r\nexport default store;","import God from \"./God\";\r\nimport Item, {EmptySlot} from \"./Item\";\r\nimport KillTiming from \"./KillTiming\";\r\nimport {shoesOfFocus} from './TestObjects';\r\n\r\ninterface Build {\r\n    god: God;\r\n    items: Item[];\r\n    killTiming: KillTiming;\r\n}\r\n\r\nconst Build = (\r\n        god:God = God(), \r\n        items: Item[] = [shoesOfFocus, EmptySlot, EmptySlot, EmptySlot, EmptySlot, EmptySlot],\r\n        killTiming = KillTiming()\r\n    ): Build => {\r\n        return {god: god, items: items, killTiming: killTiming}\r\n    }\r\n\r\nexport default Build;","import { PayloadAction } from '@reduxjs/toolkit';\r\nimport God from '../../data_objects/God';\r\nimport Build from '../../data_objects/Build';\r\n\r\n\r\nconst godReducer = (state: Build, action: PayloadAction<God>) => {\r\n            return Build(\r\n                action.payload,\r\n                state.items,\r\n                state.killTiming\r\n            )\r\n        };\r\n\r\nexport default godReducer;","import { PayloadAction } from '@reduxjs/toolkit';\r\nimport Item, { EmptySlot } from '../../data_objects/Item';\r\nimport Build from '../../data_objects/Build';\r\n\r\ntype SetItemPayload = {\r\n    index: number,\r\n    item: Item\r\n}\r\n\r\nconst setItemAt = (state: Build, action: PayloadAction<SetItemPayload>) => {\r\n    let items = [...state.items];\r\n    items[action.payload.index] = action.payload.item;\r\n    return Build(\r\n        state.god,\r\n        items,\r\n        state.killTiming\r\n    )\r\n};\r\n\r\nconst removeItemAt = (state: Build, action: PayloadAction<number>) => {\r\n    let items = [...state.items];\r\n    items[action.payload] = EmptySlot;\r\n    return Build(\r\n        state.god,\r\n        items,\r\n        state.killTiming\r\n    )\r\n}\r\n\r\nexport {setItemAt, removeItemAt};","import KillTiming from \"../../data_objects/KillTiming\";\r\nimport Build from \"../../data_objects/Build\";\r\n\r\nconst killTimingReducer = (state: Build, action: any) => {\r\n    KillTiming();\r\n}\r\n\r\nexport default killTimingReducer;","import { createReducer, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nconst timeReducer = createReducer(0, {\r\n    setTime: (state: number, action: PayloadAction<number>) => {\r\n        return action.payload;\r\n    }\r\n});\r\n\r\nconst timeRangeReducer = createReducer(3600, {\r\n    setRange: (state: number, action: PayloadAction<number>) => {\r\n        return action.payload;\r\n    }\r\n});\r\n\r\nexport {timeReducer, timeRangeReducer};","import { createSlice, Action, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { buildIdentifier } from \"../store\";\r\n\r\ntype Slot = {\r\n    buildID: buildIdentifier,\r\n    index: number\r\n}\r\n\r\nexport type {Slot};\r\n\r\ntype ItemPickerState = {\r\n    isOpen: boolean,\r\n    slot: Slot\r\n}\r\n\r\nconst itemPicker = createSlice({\r\n    name: 'itemPicker',\r\n    initialState: {\r\n        isOpen: false,\r\n        slot: {\r\n            buildID: 'left',\r\n            index: 0\r\n        }\r\n    },\r\n    reducers: {\r\n        closeItemPicker: (state, action: Action) => {\r\n            return {\r\n                isOpen: false,\r\n                slot: state.slot\r\n            }\r\n        },\r\n        openItemPicker: (state, action: PayloadAction<Slot>) => {\r\n            return {\r\n                isOpen: true,\r\n                slot: {\r\n                    buildID: action.payload.buildID,\r\n                    index: action.payload.index\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nconst closeItemPicker = itemPicker.actions.closeItemPicker;\r\nconst openItemPicker = itemPicker.actions.openItemPicker;\r\n\r\nexport {closeItemPicker, openItemPicker};\r\n\r\nexport default itemPicker;","import React from 'react'\r\nimport GodProvider from '../../redux/GodProvider'\r\nimport store, {buildSlices, buildIdentifier} from '../../redux/store'\r\n\r\ntype BuildID = {\r\n    buildIdentifier: buildIdentifier\r\n}\r\n\r\nconst GodSelector = ({buildIdentifier}: BuildID) => {\r\n    let gods = GodProvider.getInstance();\r\n\r\n    return <select\r\n        aria-label={'god selection ' + buildIdentifier}\r\n        onChange={(event) => {\r\n            let selectedGod = gods.getGod(event.target.value);\r\n            if (selectedGod) {\r\n                let slice = buildSlices[buildIdentifier];\r\n                let action = slice.actions.godReducer(selectedGod) \r\n                console.log(action.type);\r\n                store.dispatch(action);\r\n            }  \r\n        }}\r\n    >\r\n        {\r\n            gods.godNames.map((name: string, index: number) => <option key={index}>{name}</option>)\r\n        }\r\n    </select>\r\n}\r\n\r\nexport default GodSelector;","import React from 'react';\r\nimport './GodStats.css';\r\nimport { connect } from 'react-redux';\r\nimport makeStatsSelector from '../../redux/selectors/StatsSelector';\r\nimport Build from '../../data_objects/Build';\r\nimport StatBlock from '../../data_objects/StatBlock';\r\nimport GodSelector from './GodSelector';\r\nimport { buildIdentifier } from '../../redux/store';\r\n\r\ntype BuildID = {\r\n    buildIdentifier: buildIdentifier\r\n}\r\ntype ImageUrl = {\r\n    image: string\r\n}\r\ntype NameValPair = {\r\n    name: keyof StatBlock,\r\n    val: number\r\n}\r\n\r\nconst GodStats = ({buildIdentifier}: BuildID) => {\r\n    const mapStateToGodImage = (state: any) => {\r\n        return {image: state[buildIdentifier].god.image}\r\n    }\r\n\r\n    const godStats = ({image}: ImageUrl) =>\r\n        <div className=\"GodStats\">\r\n            <img src={image} alt='the selected god' aria-label={'god image ' + buildIdentifier} ></img>\r\n            <GodSelector buildIdentifier={buildIdentifier}></GodSelector>\r\n            <StatTable buildIdentifier={buildIdentifier}></StatTable>\r\n        </div>\r\n    const Connected = connect(mapStateToGodImage)(godStats);\r\n    return (<Connected></Connected>)\r\n}\r\n\r\nexport default GodStats;\r\n\r\nconst StatTable = ({buildIdentifier}: BuildID) => {\r\n    let statsSelector = makeStatsSelector();\r\n\r\n    const displayStat = (name: keyof StatBlock) => {\r\n        const mapStateToProps = (state: any) => {\r\n            let build: Build = state[buildIdentifier];\r\n            let events = statsSelector(build);\r\n            events = events.filter(event => event.time <= state.time);\r\n            let stats = events[events.length - 1].stats; //the last event whose time is <= current time\r\n            let val = stats[name]\r\n            if (typeof val == 'number') {\r\n                return {\r\n                    name: name,\r\n                    val: val\r\n                }\r\n            }\r\n        }\r\n        \r\n        const ConnectedStatItem = connect(mapStateToProps)(StatItem);\r\n        return (\r\n            <ConnectedStatItem></ConnectedStatItem>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <table><tbody>\r\n            <tr>\r\n                {displayStat('health')}\r\n                {displayStat('mana')}\r\n            </tr>\r\n            <tr>\r\n                {displayStat('hp5')}\r\n                {displayStat('mp5')}\r\n            </tr>\r\n            <tr>\r\n                {displayStat('power')}\r\n                {displayStat('critChance')}\r\n            </tr>\r\n            <tr>\r\n                {displayStat('flatPenetration')}\r\n                {displayStat('percentPenetration')}\r\n            </tr>\r\n            <tr>\r\n                {displayStat('attackSpeed')}\r\n            </tr>\r\n            <tr>\r\n                {displayStat('physicalProtections')}\r\n                {displayStat('magicalProtections')}\r\n            </tr>\r\n            <tr>\r\n                {displayStat('moveSpeed')}\r\n            </tr>\r\n            <tr>\r\n                {displayStat('cooldownReduction')}\r\n            </tr>\r\n            <tr>\r\n                {displayStat('crowdControlReduction')}\r\n            </tr>\r\n        </tbody></table>\r\n    );\r\n}\r\n\r\nconst StatItem = (props: NameValPair) => {\r\n    return(\r\n        <td>\r\n            <span>{props.name}: </span><span>{props.val}</span>\r\n        </td>\r\n    )\r\n}","import React from 'react';\r\nimport './TimelineSlider.css';\r\nimport { connect } from 'react-redux';\r\nimport {Slider} from 'antd';\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport { SliderValue } from 'antd/lib/slider';\r\nimport store from '../../redux/store';\r\n\r\n\r\ntype DispatchProps = {\r\n    changeTime: (value: SliderValue) => void;\r\n}\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        changeTime: (value: SliderValue) => {\r\n            if (typeof value === 'number') {\r\n                dispatch( createAction<number>('setTime')(value) );\r\n            }\r\n            console.log(store.getState() )\r\n        }\r\n    }  \r\n}\r\n\r\nfunction TimelineSlider({changeTime}: DispatchProps) {\r\n    return <div className=\"slidercontainer\">\r\n        <Slider\r\n            defaultValue={0}\r\n            min={0}\r\n            max={3600}\r\n            vertical={true}\r\n            reverse={true}\r\n            onChange={changeTime}\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default connect(\r\n    null, \r\n    mapDispatchToProps\r\n    )\r\n    (TimelineSlider);","import React from 'react';\r\nimport './ItemSlot.css';\r\nimport Item from '../../../data_objects/Item';\r\nimport { Slot, openItemPicker } from '../../../redux/reducers/ItemPickerSlice';\r\nimport store from '../../../redux/store';\r\n\r\ntype SlotProps = {\r\n    item: Item,\r\n    slot: Slot\r\n}\r\n\r\nconst ItemSlot = ({ item, slot}: SlotProps) => {\r\n    const openSelector = () => {\r\n        \r\n        let action = openItemPicker(slot)\r\n        store.dispatch(action)\r\n    };\r\n\r\n    return (\r\n        <li>\r\n            <img \r\n                className='item-slot' \r\n                src={item.image} \r\n                alt='selected item' \r\n                onClick={openSelector} \r\n                role='button'\r\n                aria-label='item slot'></img>\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ItemSlot;","import React from 'react';\r\nimport './ItemBuild.css';\r\nimport ItemSlot from './ItemSlot/ItemSlot';\r\nimport { buildIdentifier } from '../../redux/store';\r\nimport { connect } from 'react-redux';\r\nimport Item from '../../data_objects/Item';\r\n\r\ntype ParentProps = {\r\n    buildIdentifier: buildIdentifier,\r\n}\r\ntype StateProps = {\r\n    items: Item[]\r\n}\r\n\r\nconst mapStateToProps = (state: any, ownProps: ParentProps) => {\r\n    return {items: state[ownProps.buildIdentifier].items}\r\n}\r\n\r\nconst ItemBuild = ({buildIdentifier, items}: ParentProps & StateProps) => {\r\n    \r\n    let slots = [];\r\n    for(let count = 0; count < items.length; count++) {\r\n        slots.push(<ItemSlot \r\n            key={count}\r\n            slot={{\r\n                buildID: buildIdentifier,\r\n                index: count\r\n            }}\r\n            item={items[count]} \r\n        ></ItemSlot>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"ItemBuild\">\r\n            <ol className=\"Build\">\r\n                {slots}\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemBuild);","import React from 'react';\r\nimport './ItemPicker.css';\r\nimport store, { buildIdentifier, buildSlices } from '../../../redux/store';\r\nimport { connect } from 'react-redux';\r\nimport { closeItemPicker } from '../../../redux/reducers/ItemPickerSlice';\r\nimport { shoesOfTheMagi } from '../../../data_objects/TestObjects';\r\n\r\ntype Slot = {\r\n    buildID: buildIdentifier,\r\n    index: number\r\n}\r\n\r\ntype SelectorProps = {\r\n    isSelectorOpen: boolean,\r\n    slot: Slot\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        isSelectorOpen: state.itemPicker.isOpen,\r\n        slot: state.itemPicker.slot\r\n    }\r\n}\r\n\r\nconst ItemPicker = ({isSelectorOpen, slot}: SelectorProps) => {\r\n\r\n    const closeSelector = () => {\r\n        store.dispatch({type: closeItemPicker})\r\n    }\r\n\r\n    //TODO: return item selected in the item picker instead of default shoesOfTheMagi\r\n    const selectItem = () => {\r\n        let action = {\r\n            type: buildSlices[slot.buildID].actions.setItemAt,\r\n            payload: {\r\n                index: slot.index,\r\n                item: shoesOfTheMagi\r\n            }\r\n        }\r\n        store.dispatch(action);\r\n        closeSelector();\r\n    }\r\n    \r\n    return (\r\n            <dialog \r\n                className='Item-selector' \r\n                open={isSelectorOpen}\r\n                role='form'\r\n                aria-label='item picker'>\r\n                    <div className='search'>\r\n                        <div className='vertical-container'>\r\n                            Item Name:\r\n                            <input type='search'></input>\r\n                            <div className='horizontal-container'>\r\n                                <div className='filters'>\r\n                                    GENERAL\r\n                                    <ul>\r\n\r\n                                    </ul>\r\n                                    OFFENSIVE\r\n                                    <ul>\r\n\r\n                                    </ul>\r\n                                    DEFENSIVE\r\n                                    <ul>\r\n\r\n                                    </ul>\r\n                                    UTILITY\r\n                                    <ul>\r\n\r\n                                    </ul>\r\n                                </div>\r\n                                <ul className='search-results'>\r\n                                    <li className='item-search-result'>dummy1</li>\r\n                                    <li className='item-search-result'>dummy2</li>\r\n                                    <li className='item-search-result'>dummy3</li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='item-view'>\r\n                    <button onClick={closeSelector}>Cancel</button>\r\n                    <button onClick={selectItem}>Select Item</button>\r\n                    </div>\r\n            </dialog>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemPicker);","import React from 'react';\r\nimport './App.css';\r\nimport GodStats from '../GodStats/GodStats';\r\nimport TimelineSlider from '../TimelineSlider/TimelineSlider';\r\nimport ItemBuild from '../ItemBuild/ItemBuild';\r\nimport { buildIdentifier } from '../../redux/store';\r\nimport ItemPicker from '../ItemBuild/ItemPicker/ItemPicker';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <GodStats buildIdentifier={buildIdentifier.left}></GodStats>\r\n        <ItemBuild buildIdentifier={buildIdentifier.left}></ItemBuild>\r\n        <TimelineSlider />\r\n        <ItemBuild buildIdentifier={buildIdentifier.right}></ItemBuild>\r\n        <GodStats buildIdentifier={buildIdentifier.right}></GodStats>\r\n        <ItemPicker></ItemPicker>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}