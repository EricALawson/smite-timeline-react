{"ast":null,"code":"import { createSelector } from \"@reduxjs/toolkit\";\nimport StatBlock, { add } from \"../../data_objects/StatBlock\";\nimport { getTimeForGold, getLevelTimes } from \"../../data_objects/KillTiming\";\n\nconst selectItem = state => state.items;\n\nconst selectGod = state => state.god;\n\nconst selectKillTiming = state => state.killTiming;\n\nconst makeGodEventSelector = side => {\n  return createSelector([selectGod, selectKillTiming], (god, killTiming) => {\n    let levelTimes = getLevelTimes(killTiming);\n    let levelEvents = [];\n    levelEvents.push(...levelTimes.map((time, index) => ({\n      time: time,\n      stats: god.perLevelStats,\n      type: 'level',\n      level: index + 1,\n      slot: {\n        buildID: side,\n        index: index + 1\n      }\n    })));\n    levelEvents[0].stats = god.baseStats;\n    return levelEvents;\n  });\n};\n\nexport { makeGodEventSelector };\n\nconst makeItemEventSelector = side => {\n  return createSelector([selectItem, selectKillTiming], (items, killTiming) => {\n    let itemCosts = []; //this is the cumulative total spent when this item is built.\n\n    let prevCost = 0;\n    items.forEach(item => {\n      itemCosts.push(item.goldCost + prevCost);\n      prevCost += item.goldCost;\n    });\n    let itemTimes = itemCosts.map(gold => getTimeForGold(killTiming, gold));\n    let itemEvents = [];\n\n    for (let i = 0; i < itemTimes.length; i++) {\n      itemEvents.push({\n        time: itemTimes[i],\n        stats: items[i].stats,\n        type: 'item finished',\n        item: items[i],\n        slot: {\n          buildID: side,\n          index: i\n        }\n      });\n    }\n\n    return itemEvents;\n  });\n};\n\nexport { makeItemEventSelector };\n\nconst makeEventSelector = side => {\n  return createSelector([makeGodEventSelector(side), makeItemEventSelector(side)], (godEvents, itemEvents) => {\n    var events = [...godEvents, ...itemEvents];\n    return events.sort((a, b) => a.time > b.time ? 1 : -1);\n  });\n};\n\nconst makeStatsSelector = side => {\n  return createSelector([makeEventSelector(side)], statEvents => {\n    let summed = [];\n    let sum = StatBlock({});\n\n    for (let event of statEvents) {\n      sum = add(sum, event.stats);\n      let summedEvent = Object.assign({}, event);\n      summedEvent.stats = Object.assign({}, sum);\n      summed.push(summedEvent);\n    }\n\n    return summed;\n  });\n};\n\nexport default makeStatsSelector;","map":{"version":3,"sources":["C:/Users/erica/Documents/repos/JavaScript/smite-timeline/src/redux/selectors/StatsSelector.ts"],"names":["createSelector","StatBlock","add","getTimeForGold","getLevelTimes","selectItem","state","items","selectGod","god","selectKillTiming","killTiming","makeGodEventSelector","side","levelTimes","levelEvents","push","map","time","index","stats","perLevelStats","type","level","slot","buildID","baseStats","makeItemEventSelector","itemCosts","prevCost","forEach","item","goldCost","itemTimes","gold","itemEvents","i","length","makeEventSelector","godEvents","events","sort","a","b","makeStatsSelector","statEvents","summed","sum","event","summedEvent","Object","assign"],"mappings":"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","sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\r\nimport StatBlock, { add } from \"../../data_objects/StatBlock\";\r\nimport Item from \"../../data_objects/Item\";\r\nimport God from \"../../data_objects/God\";\r\nimport KillTiming, { getTimeForGold, getLevelTimes } from \"../../data_objects/KillTiming\";\r\nimport Build from \"../../data_objects/Build\";\r\nimport buildIdentifier from \"../buildIdentifier\";\r\nimport { Slot } from \"../reducers/ItemPickerSlice\";\r\n\r\nexport type BuildEvent = ItemEvent | LevelEvent\r\n\r\nexport interface ItemEvent {\r\n    type: 'item finished',\r\n    time: number,\r\n    stats: StatBlock,\r\n    item: Item,\r\n    slot: Slot\r\n}\r\n\r\nexport interface LevelEvent {\r\n    type: 'level',\r\n    time: number,\r\n    stats: StatBlock,\r\n    level: number,\r\n    slot: Slot\r\n}\r\n\r\n\r\nconst selectItem = (state: Build) => state.items;\r\nconst selectGod = (state: Build) => state.god;\r\nconst selectKillTiming = (state: Build) => state.killTiming;\r\n\r\nconst makeGodEventSelector = (side: buildIdentifier) => {\r\n    return createSelector( \r\n        [selectGod, selectKillTiming],\r\n        (god: God, killTiming: KillTiming) => {\r\n            let levelTimes: number[] = getLevelTimes(killTiming);\r\n            let levelEvents: LevelEvent[] = []\r\n            levelEvents.push( ...levelTimes.map( (time, index) => ({\r\n                time: time,\r\n                stats: god.perLevelStats,\r\n                type: 'level' as const,\r\n                level: index + 1,\r\n                slot: {buildID: side, index: index + 1}\r\n\r\n            })));\r\n\r\n            levelEvents[0].stats = god.baseStats;\r\n\r\n            return levelEvents;\r\n        }\r\n    );\r\n}\r\n\r\nexport {makeGodEventSelector};\r\n\r\nconst makeItemEventSelector = (side: buildIdentifier) => {\r\n    return createSelector( \r\n        [selectItem, selectKillTiming],\r\n        (items: Item[], killTiming: KillTiming) => {\r\n            let itemCosts: number[] = []; //this is the cumulative total spent when this item is built.\r\n            let prevCost = 0;\r\n            items.forEach((item: Item ) => {\r\n                itemCosts.push(item.goldCost + prevCost);\r\n                prevCost += item.goldCost;\r\n            });\r\n            let itemTimes: number[] = itemCosts.map(gold => getTimeForGold(killTiming, gold));\r\n            let itemEvents: ItemEvent[] = [];\r\n            for (let i = 0; i < itemTimes.length; i++) {\r\n                itemEvents.push({\r\n                    time: itemTimes[i],\r\n                    stats: items[i].stats,\r\n                    type: 'item finished',\r\n                    item: items[i],\r\n                    slot: {buildID: side, index: i}\r\n                });\r\n        }\r\n        return itemEvents;\r\n    });\r\n}\r\nexport {makeItemEventSelector};\r\n\r\nconst makeEventSelector = (side: buildIdentifier) => {\r\n    return createSelector(\r\n        [makeGodEventSelector(side), makeItemEventSelector(side)],\r\n        (godEvents, itemEvents, ) => {\r\n            var events: BuildEvent[] = [...godEvents, ...itemEvents];\r\n            \r\n            return events.sort((a:BuildEvent, b: BuildEvent) => (a.time > b.time) ? 1: -1);\r\n        }\r\n    );\r\n}\r\n\r\nconst makeStatsSelector = (side: buildIdentifier) => {\r\n    return createSelector(\r\n        [makeEventSelector(side)],\r\n        (statEvents) => {\r\n            let summed: BuildEvent[] = [];\r\n            let sum = StatBlock({});\r\n            for (let event of statEvents) {\r\n                sum = add(sum, event.stats);\r\n                let summedEvent = Object.assign({}, event);\r\n                summedEvent.stats = Object.assign({}, sum);\r\n                summed.push(summedEvent)\r\n            }\r\n            return summed;\r\n        }\r\n    )\r\n}\r\n\r\nexport default makeStatsSelector;\r\n\r\n"]},"metadata":{},"sourceType":"module"}