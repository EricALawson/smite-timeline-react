{"ast":null,"code":"import _createForOfIteratorHelper from\"C:\\\\Users\\\\erica\\\\Documents\\\\repos\\\\JavaScript\\\\smite-timeline\\\\App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";import _toConsumableArray from\"C:\\\\Users\\\\erica\\\\Documents\\\\repos\\\\JavaScript\\\\smite-timeline\\\\App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import{createSelector}from\"@reduxjs/toolkit\";import{getTimeForGold,getLevelTimes}from\"../../data_objects/KillTiming\";import{StatBlock}from\"@smite-timeline/smite-game-objects\";import{add}from\"@smite-timeline/smite-game-objects/lib/StatBlock\";var selectItem=function selectItem(state){return state.items;};var selectGod=function selectGod(state){return state.god;};var selectKillTiming=function selectKillTiming(state){return state.killTiming;};var makeGodEventSelector=function makeGodEventSelector(side){return createSelector([selectGod,selectKillTiming],function(god,killTiming){var levelTimes=getLevelTimes(killTiming);var levelEvents=[];levelEvents.push.apply(levelEvents,_toConsumableArray(levelTimes.map(function(time,index){return{time:time,stats:god.perLevelStats,type:'level',level:index+1,slot:{buildID:side,index:index+1}};})));levelEvents[0].stats=god.baseStats;return levelEvents;});};export{makeGodEventSelector};var makeItemEventSelector=function makeItemEventSelector(side){return createSelector([selectItem,selectKillTiming],function(items,killTiming){var itemCosts=[];//this is the cumulative total spent when this item is built.\nvar prevCost=0;items.forEach(function(item){itemCosts.push(item.goldCost+prevCost);prevCost+=item.goldCost;});var itemTimes=itemCosts.map(function(gold){return getTimeForGold(killTiming,gold);});var itemEvents=[];for(var i=0;i<itemTimes.length;i++){itemEvents.push({time:itemTimes[i],stats:items[i].stats,type:'item finished',item:items[i],slot:{buildID:side,index:i}});}return itemEvents;});};export{makeItemEventSelector};var makeEventSelector=function makeEventSelector(side){return createSelector([makeGodEventSelector(side),makeItemEventSelector(side)],function(godEvents,itemEvents){var events=[].concat(_toConsumableArray(godEvents),_toConsumableArray(itemEvents));return events.sort(function(a,b){return a.time>b.time?1:-1;});});};var makeStatsSelector=function makeStatsSelector(side){return createSelector([makeEventSelector(side)],function(statEvents){var summed=[];var sum=StatBlock({});var _iterator=_createForOfIteratorHelper(statEvents),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var event=_step.value;sum=add(sum,event.stats);var summedEvent=Object.assign({},event);summedEvent.stats=Object.assign({},sum);summed.push(summedEvent);}}catch(err){_iterator.e(err);}finally{_iterator.f();}return summed;});};export default makeStatsSelector;","map":{"version":3,"sources":["C:/Users/erica/Documents/repos/JavaScript/smite-timeline/App/src/redux/selectors/StatsSelector.ts"],"names":["createSelector","getTimeForGold","getLevelTimes","StatBlock","add","selectItem","state","items","selectGod","god","selectKillTiming","killTiming","makeGodEventSelector","side","levelTimes","levelEvents","push","map","time","index","stats","perLevelStats","type","level","slot","buildID","baseStats","makeItemEventSelector","itemCosts","prevCost","forEach","item","goldCost","itemTimes","gold","itemEvents","i","length","makeEventSelector","godEvents","events","sort","a","b","makeStatsSelector","statEvents","summed","sum","event","summedEvent","Object","assign"],"mappings":"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","sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\r\nimport KillTiming, { getTimeForGold, getLevelTimes } from \"../../data_objects/KillTiming\";\r\nimport Build from \"../../data_objects/Build\";\r\nimport buildIdentifier from \"../buildIdentifier\";\r\nimport { Slot } from \"../reducers/ItemPickerSlice\";\r\nimport { God, Item, StatBlock } from \"@smite-timeline/smite-game-objects\";\r\nimport { add } from \"@smite-timeline/smite-game-objects/lib/StatBlock\";\r\n\r\nexport type BuildEvent = ItemEvent | LevelEvent\r\n\r\nexport interface ItemEvent {\r\n    type: 'item finished',\r\n    time: number,\r\n    stats: StatBlock,\r\n    item: Item,\r\n    slot: Slot\r\n}\r\n\r\nexport interface LevelEvent {\r\n    type: 'level',\r\n    time: number,\r\n    stats: StatBlock,\r\n    level: number,\r\n    slot: Slot\r\n}\r\n\r\n\r\nconst selectItem = (state: Build) => state.items;\r\nconst selectGod = (state: Build) => state.god;\r\nconst selectKillTiming = (state: Build) => state.killTiming;\r\n\r\nconst makeGodEventSelector = (side: buildIdentifier) => {\r\n    return createSelector( \r\n        [selectGod, selectKillTiming],\r\n        (god: God, killTiming: KillTiming) => {\r\n            let levelTimes: number[] = getLevelTimes(killTiming);\r\n            let levelEvents: LevelEvent[] = []\r\n            levelEvents.push( ...levelTimes.map( (time, index) => ({\r\n                time: time,\r\n                stats: god.perLevelStats,\r\n                type: 'level' as const,\r\n                level: index + 1,\r\n                slot: {buildID: side, index: index + 1}\r\n\r\n            })));\r\n\r\n            levelEvents[0].stats = god.baseStats;\r\n\r\n            return levelEvents;\r\n        }\r\n    );\r\n}\r\n\r\nexport {makeGodEventSelector};\r\n\r\nconst makeItemEventSelector = (side: buildIdentifier) => {\r\n    return createSelector( \r\n        [selectItem, selectKillTiming],\r\n        (items: Item[], killTiming: KillTiming) => {\r\n            let itemCosts: number[] = []; //this is the cumulative total spent when this item is built.\r\n            let prevCost = 0;\r\n            items.forEach((item: Item ) => {\r\n                itemCosts.push(item.goldCost + prevCost);\r\n                prevCost += item.goldCost;\r\n            });\r\n            let itemTimes: number[] = itemCosts.map(gold => getTimeForGold(killTiming, gold));\r\n            let itemEvents: ItemEvent[] = [];\r\n            for (let i = 0; i < itemTimes.length; i++) {\r\n                itemEvents.push({\r\n                    time: itemTimes[i],\r\n                    stats: items[i].stats,\r\n                    type: 'item finished',\r\n                    item: items[i],\r\n                    slot: {buildID: side, index: i}\r\n                });\r\n        }\r\n        return itemEvents;\r\n    });\r\n}\r\nexport {makeItemEventSelector};\r\n\r\nconst makeEventSelector = (side: buildIdentifier) => {\r\n    return createSelector(\r\n        [makeGodEventSelector(side), makeItemEventSelector(side)],\r\n        (godEvents, itemEvents, ) => {\r\n            var events: BuildEvent[] = [...godEvents, ...itemEvents];\r\n            \r\n            return events.sort((a:BuildEvent, b: BuildEvent) => (a.time > b.time) ? 1: -1);\r\n        }\r\n    );\r\n}\r\n\r\nconst makeStatsSelector = (side: buildIdentifier) => {\r\n    return createSelector(\r\n        [makeEventSelector(side)],\r\n        (statEvents) => {\r\n            let summed: BuildEvent[] = [];\r\n            let sum = StatBlock({});\r\n            for (let event of statEvents) {\r\n                sum = add(sum, event.stats);\r\n                let summedEvent = Object.assign({}, event);\r\n                summedEvent.stats = Object.assign({}, sum);\r\n                summed.push(summedEvent)\r\n            }\r\n            return summed;\r\n        }\r\n    )\r\n}\r\n\r\nexport default makeStatsSelector;\r\n\r\n"]},"metadata":{},"sourceType":"module"}