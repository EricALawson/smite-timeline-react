{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";import buildIdentifier from\"../buildIdentifier\";import{EmptySlot}from\"../../data_objects/Item\";var itemPicker=createSlice({name:'itemPicker',initialState:{isOpen:false,slot:{buildID:buildIdentifier.left,index:0},selected:EmptySlot,activeFilters:[]},reducers:{closeItemPicker:function closeItemPicker(state,action){var newState=Object.assign({},state);newState.isOpen=false;newState.selected=EmptySlot;return newState;},openItemPicker:function openItemPicker(state,action){var newState=Object.assign({},state);newState.slot=action.payload;newState.isOpen=true;return newState;},setSelected:function setSelected(state,action){var newState=Object.assign({},state);newState.selected=action.payload;return newState;},toggleFilter:function toggleFilter(state,action){//I use Immer here to modify state because this next line causes immer to error \n//if I return a state object, because Immer thinks this line modifies the state, \n//and it wont allow modification to the proxy state and returning a new state, \n//which would likely be a bug. I think Immer is wrong about this line, but fighting it is a waste of time.\nvar index=state.activeFilters.findIndex(function(filter){return filter===action.payload;});if(index>-1){state.activeFilters.splice(index,1);}else{state.activeFilters.push(action.payload);}}}});var closeItemPicker=itemPicker.actions.closeItemPicker;var openItemPicker=itemPicker.actions.openItemPicker;export{closeItemPicker,openItemPicker};export default itemPicker;","map":{"version":3,"sources":["C:/Users/erica/Documents/repos/JavaScript/smite-timeline/src/redux/reducers/ItemPickerSlice.ts"],"names":["createSlice","buildIdentifier","EmptySlot","itemPicker","name","initialState","isOpen","slot","buildID","left","index","selected","activeFilters","reducers","closeItemPicker","state","action","newState","Object","assign","openItemPicker","payload","setSelected","toggleFilter","findIndex","filter","splice","push","actions"],"mappings":"AAAA,OAASA,WAAT,KAAmD,kBAAnD,CACA,MAAOC,CAAAA,eAAP,KAA4B,oBAA5B,CACA,OAAeC,SAAf,KAAgC,yBAAhC,CAoBA,GAAMC,CAAAA,UAAU,CAAGH,WAAW,CAAC,CAC3BI,IAAI,CAAE,YADqB,CAE3BC,YAAY,CAAE,CACVC,MAAM,CAAE,KADE,CAEVC,IAAI,CAAE,CACFC,OAAO,CAAEP,eAAe,CAACQ,IADvB,CAEFC,KAAK,CAAE,CAFL,CAFI,CAMVC,QAAQ,CAAET,SANA,CAOVU,aAAa,CAAE,EAPL,CAFa,CAW3BC,QAAQ,CAAE,CACNC,eAAe,CAAE,yBAACC,KAAD,CAAyBC,MAAzB,CAA4C,CACzD,GAAIC,CAAAA,QAAQ,CAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBJ,KAAlB,CAAf,CACAE,QAAQ,CAACX,MAAT,CAAkB,KAAlB,CACAW,QAAQ,CAACN,QAAT,CAAoBT,SAApB,CACA,MAAOe,CAAAA,QAAP,CACH,CANK,CAONG,cAAc,CAAE,wBAACL,KAAD,CAAyBC,MAAzB,CAAyD,CACrE,GAAIC,CAAAA,QAAQ,CAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBJ,KAAlB,CAAf,CACAE,QAAQ,CAACV,IAAT,CAAgBS,MAAM,CAACK,OAAvB,CACAJ,QAAQ,CAACX,MAAT,CAAkB,IAAlB,CACA,MAAOW,CAAAA,QAAP,CACH,CAZK,CAaNK,WAAW,CAAE,qBAACP,KAAD,CAAyBC,MAAzB,CAAyD,CAClE,GAAIC,CAAAA,QAAQ,CAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBJ,KAAlB,CAAf,CACAE,QAAQ,CAACN,QAAT,CAAoBK,MAAM,CAACK,OAA3B,CACA,MAAOJ,CAAAA,QAAP,CACH,CAjBK,CAkBNM,YAAY,CAAE,sBAACR,KAAD,CAAyBC,MAAzB,CAA+D,CACzE;AACA;AACA;AACA;AACA,GAAIN,CAAAA,KAAK,CAAGK,KAAK,CAACH,aAAN,CAAoBY,SAApB,CAA8B,SAAAC,MAAM,QAAIA,CAAAA,MAAM,GAAKT,MAAM,CAACK,OAAtB,EAApC,CAAZ,CACA,GAAIX,KAAK,CAAG,CAAC,CAAb,CAAgB,CACZK,KAAK,CAACH,aAAN,CAAoBc,MAApB,CAA2BhB,KAA3B,CAAkC,CAAlC,EACH,CAFD,IAEO,CACHK,KAAK,CAACH,aAAN,CAAoBe,IAApB,CAAyBX,MAAM,CAACK,OAAhC,EACH,CACJ,CA7BK,CAXiB,CAAD,CAA9B,CA4CA,GAAMP,CAAAA,eAAe,CAAGX,UAAU,CAACyB,OAAX,CAAmBd,eAA3C,CACA,GAAMM,CAAAA,cAAc,CAAGjB,UAAU,CAACyB,OAAX,CAAmBR,cAA1C,CAEA,OAAQN,eAAR,CAAyBM,cAAzB,EAEA,cAAejB,CAAAA,UAAf","sourcesContent":["import { createSlice, Action, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport buildIdentifier from \"../buildIdentifier\";\r\nimport Item, { EmptySlot } from \"../../data_objects/Item\";\r\nimport { FilterName } from \"../../components/ItemBuild/ItemPicker/FilterList\";\r\n\r\ntype Slot = {\r\n    buildID: buildIdentifier,\r\n    index: number\r\n}\r\n\r\nexport type {Slot};\r\n\r\ntype ItemFilter = (item: Item) => boolean\r\n\r\ntype ItemPickerState = {\r\n    isOpen: boolean,\r\n    slot: Slot,\r\n    selected: Item,\r\n    activeFilters: FilterName[]\r\n}\r\n\r\n\r\nconst itemPicker = createSlice({\r\n    name: 'itemPicker',\r\n    initialState: {\r\n        isOpen: false,\r\n        slot: {\r\n            buildID: buildIdentifier.left,\r\n            index: 0\r\n        },\r\n        selected: EmptySlot,\r\n        activeFilters: [] as FilterName[],\r\n    },\r\n    reducers: {\r\n        closeItemPicker: (state: ItemPickerState, action: Action) => {\r\n            let newState = Object.assign({}, state)\r\n            newState.isOpen = false;\r\n            newState.selected = EmptySlot;\r\n            return newState;\r\n        },\r\n        openItemPicker: (state: ItemPickerState, action: PayloadAction<Slot>) => {\r\n            let newState = Object.assign({}, state)\r\n            newState.slot = action.payload\r\n            newState.isOpen = true;\r\n            return newState;\r\n        },\r\n        setSelected: (state: ItemPickerState, action: PayloadAction<Item>) => {\r\n            let newState = Object.assign({}, state)\r\n            newState.selected = action.payload;\r\n            return newState;\r\n        },\r\n        toggleFilter: (state: ItemPickerState, action: PayloadAction<FilterName>) => {\r\n            //I use Immer here to modify state because this next line causes immer to error \r\n            //if I return a state object, because Immer thinks this line modifies the state, \r\n            //and it wont allow modification to the proxy state and returning a new state, \r\n            //which would likely be a bug. I think Immer is wrong about this line, but fighting it is a waste of time.\r\n            let index = state.activeFilters.findIndex(filter => filter === action.payload);\r\n            if (index > -1) {\r\n                state.activeFilters.splice(index, 1);\r\n            } else {\r\n                state.activeFilters.push(action.payload)\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nconst closeItemPicker = itemPicker.actions.closeItemPicker;\r\nconst openItemPicker = itemPicker.actions.openItemPicker;\r\n\r\nexport {closeItemPicker, openItemPicker};\r\n\r\nexport default itemPicker;"]},"metadata":{},"sourceType":"module"}