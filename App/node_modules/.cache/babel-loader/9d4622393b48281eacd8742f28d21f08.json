{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\erica\\\\Documents\\\\repos\\\\JavaScript\\\\smite-timeline\\\\src\\\\components\\\\TimelineSlider\\\\SliderEventGroup.tsx\";\nimport React from \"react\";\nimport ItemSlot from \"../ItemBuild/ItemSlot/ItemSlot\";\nimport \"./SliderEventGroup.css\";\n\nconst Spacer = () => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"level-spacer\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 22\n  }\n});\n\n_c = Spacer;\n\nconst SliderEventGroup = ({\n  events\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: 'event-group',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left event-group-side\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, events.filter(event => event.type === 'level').length > 0 ? null : /*#__PURE__*/React.createElement(Spacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 19\n    }\n  }), events.filter(event => event.slot.buildID === 'left').map(event => {\n    switch (event.type) {\n      case 'item finished':\n        return /*#__PURE__*/React.createElement(ItemSlot, {\n          item: event.item,\n          slot: event.slot,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 54\n          }\n        });\n\n      case 'level':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: 'level-event',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 46\n          }\n        }, event.level);\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right event-group-side\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, events.filter(event => event.type === 'level').length > 0 ? null : /*#__PURE__*/React.createElement(Spacer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 19\n    }\n  }), events.filter(event => event.slot.buildID === 'right').map(event => {\n    switch (event.type) {\n      case 'item finished':\n        return /*#__PURE__*/React.createElement(ItemSlot, {\n          item: event.item,\n          slot: event.slot,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 54\n          }\n        });\n\n      case 'level':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: 'level-event',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 46\n          }\n        }, event.level);\n    }\n  })));\n};\n\n_c2 = SliderEventGroup;\nexport default SliderEventGroup;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Spacer\");\n$RefreshReg$(_c2, \"SliderEventGroup\");","map":{"version":3,"sources":["C:/Users/erica/Documents/repos/JavaScript/smite-timeline/src/components/TimelineSlider/SliderEventGroup.tsx"],"names":["React","ItemSlot","Spacer","SliderEventGroup","events","filter","event","type","length","slot","buildID","map","item","level"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAO,wBAAP;;AAKA,MAAMC,MAAM,GAAG,mBAAM;AAAK,EAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAArB;;KAAMA,M;;AAGN,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAsB;AAC3C,sBAAQ;AAAK,IAAA,SAAS,EAAE,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACJ;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIA,MAAM,CAACC,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAe,OAAtC,EAA+CC,MAA/C,GAAwD,CAAxD,GACM,IADN,gBAEM,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJV,EAOIJ,MAAM,CAACC,MAAP,CAAeC,KAAK,IAAIA,KAAK,CAACG,IAAN,CAAWC,OAAX,KAAuB,MAA/C,EACKC,GADL,CACWL,KAAD,IAAwB;AAC1B,YAAQA,KAAK,CAACC,IAAd;AACI,WAAK,eAAL;AAAsB,4BAAO,oBAAC,QAAD;AAAU,UAAA,IAAI,EAAED,KAAK,CAACM,IAAtB;AAA4B,UAAA,IAAI,EAAEN,KAAK,CAACG,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACtB,WAAK,OAAL;AAAc,4BAAO;AAAK,UAAA,SAAS,EAAE,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAgCH,KAAK,CAACO,KAAtC,CAAP;AAFlB;AAIP,GAND,CAPJ,CADI,eAgBJ;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIT,MAAM,CAACC,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAe,OAAtC,EAA+CC,MAA/C,GAAwD,CAAxD,GACM,IADN,gBAEM,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJV,EAOIJ,MAAM,CAACC,MAAP,CAAeC,KAAK,IAAIA,KAAK,CAACG,IAAN,CAAWC,OAAX,KAAuB,OAA/C,EACKC,GADL,CACWL,KAAD,IAAwB;AAC1B,YAAQA,KAAK,CAACC,IAAd;AACI,WAAK,eAAL;AAAsB,4BAAO,oBAAC,QAAD;AAAU,UAAA,IAAI,EAAED,KAAK,CAACM,IAAtB;AAA4B,UAAA,IAAI,EAAEN,KAAK,CAACG,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACtB,WAAK,OAAL;AAAc,4BAAO;AAAK,UAAA,SAAS,EAAE,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAgCH,KAAK,CAACO,KAAtC,CAAP;AAFlB;AAIP,GAND,CAPJ,CAhBI,CAAR;AAiCH,CAlCD;;MAAMV,gB;AAoCN,eAAeA,gBAAf","sourcesContent":["import { BuildEvent } from \"../../redux/selectors/StatsSelector\";\r\nimport React from \"react\";\r\nimport ItemSlot from \"../ItemBuild/ItemSlot/ItemSlot\";\r\nimport \"./SliderEventGroup.css\";\r\n\r\ntype Props = {\r\n    events: BuildEvent[]\r\n}\r\nconst Spacer = () => <div className='level-spacer'></div>\r\n\r\n\r\nconst SliderEventGroup = ({ events}: Props) => {\r\n    return (<div className={'event-group'}>\r\n        <div className='left event-group-side'>\r\n        {\r\n            events.filter(event => event.type === 'level').length > 0\r\n                ? null\r\n                : <Spacer></Spacer>\r\n        }\r\n        {\r\n            events.filter( event => event.slot.buildID === 'left')\r\n                .map( (event): JSX.Element => {\r\n                    switch (event.type) {\r\n                        case 'item finished': return <ItemSlot item={event.item} slot={event.slot}></ItemSlot>\r\n                        case 'level': return <div className={'level-event'}>{event.level}</div>\r\n                    }\r\n            })\r\n        }</div>\r\n        <div className='right event-group-side'>\r\n        {\r\n            events.filter(event => event.type === 'level').length > 0\r\n                ? null\r\n                : <Spacer></Spacer>\r\n        }\r\n        {\r\n            events.filter( event => event.slot.buildID === 'right')\r\n                .map( (event): JSX.Element => {\r\n                    switch (event.type) {\r\n                        case 'item finished': return <ItemSlot item={event.item} slot={event.slot}></ItemSlot>\r\n                        case 'level': return <div className={'level-event'}>{event.level}</div>\r\n                    }\r\n            })\r\n        }\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default SliderEventGroup;"]},"metadata":{},"sourceType":"module"}