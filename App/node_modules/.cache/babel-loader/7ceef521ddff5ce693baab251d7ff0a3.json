{"ast":null,"code":"export function KillTiming() {\n  return {\n    startingGold: 1500,\n    waveStartTime: 30,\n    waveRespawnTime: 30,\n    jungleStartTime: 30,\n    jungleRespawnTime: 120,\n    goldPerSecond: 3\n  };\n}\nexport function getLevelTimes(killTiming) {\n  let time = 0;\n  let xp = 0;\n  let level = 0; //don't bother adjusting for array indexing until we display the level.\n\n  var times = [];\n\n  while (times.length < 20) {\n    if (xp >= xpForLevel[level]) {\n      times.push(time);\n      level++;\n    }\n\n    time++;\n\n    if ((time - killTiming.waveStartTime) % killTiming.waveRespawnTime === 0) {\n      xp += minions.waveMelee.xp * 3 + minions.waveArcher.xp * 3;\n    }\n\n    if ((time - killTiming.jungleStartTime) % killTiming.jungleRespawnTime === 0) {\n      xp += minions.jungleBuffMinion.xp * 2 + minions.jungleBuffHolder.xp;\n    }\n  }\n\n  return times;\n}\nexport function getTimeForGold(killTiming, goldTarget) {\n  let gold = killTiming.startingGold;\n  let time = 0;\n\n  while (gold < goldTarget) {\n    time++;\n    gold += killTiming.goldPerSecond;\n\n    if ((time - killTiming.waveStartTime) % killTiming.waveRespawnTime === 0) {\n      gold += minions.waveMelee.gold * 3 + minions.waveArcher.gold * 3;\n    }\n\n    if ((time - killTiming.jungleStartTime) % killTiming.jungleRespawnTime === 0) {\n      gold += minions.jungleBuffMinion.gold * 2 + minions.jungleBuffHolder.gold;\n    } //console.log(\"time: \" + time + \" gold: \" + gold);\n\n  }\n\n  return time;\n}\nexport function getTimeForKills(killTiming, killTarget) {\n  let time = 0;\n  let kills = 0;\n\n  while (kills < killTarget) {\n    if ((time - killTiming.waveStartTime) % killTiming.waveRespawnTime === 0) {\n      kills += 6;\n    }\n\n    if ((time - killTiming.jungleStartTime) % killTiming.jungleRespawnTime === 0) {\n      kills += 3;\n    }\n  }\n\n  return time;\n}\nconst xpForLevel = [0, 308, 671, 1089, 1562, 2090, 2673, 3311, 4004, 4752, 5555, 6413, 7326, 8294, 9317, 10395, 11528, 12716, 13959, 15257];\nconst minions = {\n  waveMelee: {\n    xp: 45,\n    gold: 25\n  },\n  waveArcher: {\n    xp: 25,\n    gold: 18\n  },\n  jungleBuffMinion: {\n    xp: 16,\n    gold: 20\n  },\n  jungleBuffHolder: {\n    xp: 116,\n    gold: 48\n  },\n  jungleHarpy: {\n    xp: 22,\n    gold: 22\n  },\n  jungleElderHarpy: {\n    xp: 30,\n    gold: 34\n  },\n  jungleAlphaHarpy: {\n    xp: 35,\n    gold: 50\n  }\n};\nexport default KillTiming;","map":{"version":3,"sources":["C:/Users/erica/Documents/repos/JavaScript/smite-timeline/src/data_objects/KillTiming.ts"],"names":["KillTiming","startingGold","waveStartTime","waveRespawnTime","jungleStartTime","jungleRespawnTime","goldPerSecond","getLevelTimes","killTiming","time","xp","level","times","length","xpForLevel","push","minions","waveMelee","waveArcher","jungleBuffMinion","jungleBuffHolder","getTimeForGold","goldTarget","gold","getTimeForKills","killTarget","kills","jungleHarpy","jungleElderHarpy","jungleAlphaHarpy"],"mappings":"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","sourcesContent":["\r\n\r\nexport interface KillTiming {\r\n    startingGold: number;\r\n    waveStartTime: number;\r\n    waveRespawnTime: number;\r\n    jungleStartTime: number;\r\n    jungleRespawnTime: number;\r\n    goldPerSecond: number;\r\n}\r\n\r\nexport function KillTiming(): KillTiming {\r\n    return {\r\n        startingGold: 1500,\r\n        waveStartTime: 30,\r\n        waveRespawnTime: 30,\r\n        jungleStartTime: 30,\r\n        jungleRespawnTime: 120,\r\n        goldPerSecond: 3\r\n    }\r\n}\r\n    \r\nexport function getLevelTimes(killTiming: KillTiming): number[] {\r\n    let time = 0;\r\n    let xp = 0;\r\n    let level = 0; //don't bother adjusting for array indexing until we display the level.\r\n    var times = [];\r\n    while(times.length < 20) {\r\n        if(xp >= xpForLevel[level]) {\r\n            times.push(time);\r\n            level++;\r\n        }\r\n\r\n        time++;\r\n\r\n        if((time - killTiming.waveStartTime) % killTiming.waveRespawnTime === 0) {\r\n            xp += minions.waveMelee.xp * 3 + minions.waveArcher.xp * 3;\r\n        }\r\n\r\n        if((time - killTiming.jungleStartTime) % killTiming.jungleRespawnTime === 0) {\r\n            xp += minions.jungleBuffMinion.xp * 2 + minions.jungleBuffHolder.xp;\r\n        }\r\n    }\r\n    return times;\r\n}\r\n\r\nexport function getTimeForGold(killTiming: KillTiming, goldTarget: number): number {\r\n    let gold = killTiming.startingGold;\r\n    let time = 0;\r\n    while (gold < goldTarget) {\r\n        time++;\r\n\r\n        gold += killTiming.goldPerSecond;\r\n\r\n        if((time - killTiming.waveStartTime) % killTiming.waveRespawnTime === 0) {\r\n            gold += minions.waveMelee.gold * 3 + minions.waveArcher.gold * 3;\r\n        }\r\n\r\n        if((time - killTiming.jungleStartTime) % killTiming.jungleRespawnTime === 0) {\r\n            gold += minions.jungleBuffMinion.gold * 2 + minions.jungleBuffHolder.gold;\r\n        }\r\n        //console.log(\"time: \" + time + \" gold: \" + gold);\r\n    }\r\n    return time;\r\n}\r\n\r\nexport function getTimeForKills(killTiming: KillTiming, killTarget: number) {\r\n    let time = 0;\r\n    let kills = 0;\r\n    while (kills < killTarget) {\r\n        if((time - killTiming.waveStartTime) % killTiming.waveRespawnTime === 0) {\r\n            kills += 6;\r\n        }\r\n\r\n        if((time - killTiming.jungleStartTime) % killTiming.jungleRespawnTime === 0) {\r\n            kills += 3;\r\n        }\r\n    }\r\n\r\n    return time;\r\n}\r\n\r\n\r\nconst xpForLevel = [\r\n    0,\r\n    308,\r\n    671,\r\n    1089,\r\n    1562,\r\n    2090,\r\n    2673,\r\n    3311,\r\n    4004,\r\n    4752,\r\n    5555,\r\n    6413,\r\n    7326,\r\n    8294,\r\n    9317,\r\n    10395,\r\n    11528,\r\n    12716,\r\n    13959,\r\n    15257\r\n]\r\n\r\nconst minions = {\r\n\r\n    waveMelee: {\r\n        xp: 45,\r\n        gold: 25\r\n    },\r\n    waveArcher : {\r\n        xp: 25,\r\n        gold: 18\r\n    },\r\n    jungleBuffMinion : {\r\n        xp: 16,\r\n        gold: 20\r\n    },\r\n    jungleBuffHolder : {\r\n        xp: 116,\r\n        gold: 48\r\n    },\r\n    jungleHarpy : {\r\n        xp: 22,\r\n        gold: 22\r\n    },\r\n    jungleElderHarpy: {\r\n        xp: 30,\r\n        gold: 34\r\n    },\r\n    jungleAlphaHarpy: {\r\n        xp: 35,\r\n        gold: 50\r\n    }\r\n}\r\n\r\nexport default KillTiming;"]},"metadata":{},"sourceType":"module"}